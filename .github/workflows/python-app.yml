name: Python application #name of our applications, name doesn't matter

on: #our triggers, push and pull request, it only performs on the main branch.
    push:
        branches: ["main", "develop"]
    pull_request:
        branches: ["main", "develop"]

permissions:
    contents: read

jobs:
    linting:
        runs-on: ubuntu-latest
        steps:
            #----------------------------------------------
            #       check-out repo and set-up python
            #----------------------------------------------
            - name: Check out repository
              uses: actions/checkout@v3
            - name: Set up python
              id: setup-python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.10"
            #----------------------------------------------
            #  -----  install & configure poetry  -----
            #----------------------------------------------
            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            #----------------------------------------------
            #       load cached venv if cache exists
            #----------------------------------------------
            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v3
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
            #----------------------------------------------
            # install dependencies if cache does not exist
            #----------------------------------------------
            - name: Install dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: poetry install --no-interaction --no-root
            #----------------------------------------------
            # Activate environment
            #----------------------------------------------
            - name: Activate environment
              run: |
                  source .venv/bin/activate
            #----------------------------------------------
            # Linting and formatting
            #----------------------------------------------
            - name: Lint with flake8
              run: |
                  # stop the build if there are Python syntax errors or undefined names
                  flake8 ./src --count --select=E9,F63,F7 --show-source --statistics
                  # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                  flake8 ./src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
            - name: Format with black
              run: |
                  black ./src --check

            # #----------------------------------------------
            # #              run test suite
            # #----------------------------------------------
            # - name: Run tests
            #   run: |
            #       source .venv/bin/activate
            #       pytest tests/
            #       coverage report
